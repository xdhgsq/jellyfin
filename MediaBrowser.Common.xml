<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaBrowser.Common</name>
    </assembly>
    <members>
        <member name="T:MediaBrowser.Common.Configuration.ConfigurationStore">
            <summary>
            Describes a single entry in the application configuration.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.ConfigurationStore.Key">
            <summary>
            Gets or sets the unique identifier for the configuration.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.ConfigurationStore.ConfigurationType">
            <summary>
            Gets or sets the type used to store the data for this configuration entry.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.ConfigurationUpdateEventArgs.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.ConfigurationUpdateEventArgs.NewConfiguration">
            <summary>
            Gets or sets the new configuration.
            </summary>
            <value>The new configuration.</value>
        </member>
        <member name="T:MediaBrowser.Common.Configuration.EncodingConfigurationExtensions">
            <summary>
            Class containing extension methods for working with the encoding configuration.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.EncodingConfigurationExtensions.GetEncodingOptions(MediaBrowser.Common.Configuration.IConfigurationManager)">
            <summary>
            Gets the encoding options.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
            <returns>The encoding options.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.EncodingConfigurationExtensions.GetTranscodePath(MediaBrowser.Common.Configuration.IConfigurationManager)">
            <summary>
            Retrieves the transcoding temp path from the encoding configuration, falling back to a default if no path
            is specified in configuration. If the directory does not exist, it will be created.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
            <returns>The transcoding temp path.</returns>
            <exception cref="T:System.UnauthorizedAccessException">If the directory does not exist, and the caller does not have the required permission to create it.</exception>
            <exception cref="T:System.NotSupportedException">If there is a custom path transcoding path specified, but it is invalid.</exception>
            <exception cref="T:System.IO.IOException">If the directory does not exist, and it also could not be created.</exception>
        </member>
        <member name="T:MediaBrowser.Common.Configuration.IApplicationPaths">
            <summary>
            Interface IApplicationPaths.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.ProgramDataPath">
            <summary>
            Gets the path to the program data folder.
            </summary>
            <value>The program data path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.WebPath">
            <summary>
            Gets the path to the web UI resources folder.
            </summary>
            <remarks>
            This value is not relevant if the server is configured to not host any static web content.
            </remarks>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.ProgramSystemPath">
            <summary>
            Gets the path to the program system folder.
            </summary>
            <value>The program data path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.DataPath">
            <summary>
            Gets the folder path to the data directory.
            </summary>
            <value>The data directory.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.ImageCachePath">
            <summary>
            Gets the image cache path.
            </summary>
            <value>The image cache path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.PluginsPath">
            <summary>
            Gets the path to the plugin directory.
            </summary>
            <value>The plugins path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.PluginConfigurationsPath">
            <summary>
            Gets the path to the plugin configurations directory.
            </summary>
            <value>The plugin configurations path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.LogDirectoryPath">
            <summary>
            Gets the path to the log directory.
            </summary>
            <value>The log directory path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.ConfigurationDirectoryPath">
            <summary>
            Gets the path to the application configuration root directory.
            </summary>
            <value>The configuration directory path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.SystemConfigurationFilePath">
            <summary>
            Gets the path to the system configuration file.
            </summary>
            <value>The system configuration file path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.CachePath">
            <summary>
            Gets the folder path to the cache directory.
            </summary>
            <value>The cache directory.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.TempDirectory">
            <summary>
            Gets the folder path to the temp directory within the cache folder.
            </summary>
            <value>The temp directory.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.VirtualDataPath">
            <summary>
            Gets the magic string used for virtual path manipulation.
            </summary>
            <value>The magic string used for virtual path manipulation.</value>
        </member>
        <member name="T:MediaBrowser.Common.Configuration.IConfigurationFactory">
            <summary>
            Provides an interface to retrieve a configuration store. Classes with this interface are scanned for at
            application start to dynamically register configuration for various modules/plugins.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationFactory.GetConfigurations">
            <summary>
            Get the configuration store for this module.
            </summary>
            <returns>The configuration store.</returns>
        </member>
        <member name="E:MediaBrowser.Common.Configuration.IConfigurationManager.NamedConfigurationUpdating">
            <summary>
            Occurs when [configuration updating].
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.Configuration.IConfigurationManager.ConfigurationUpdated">
            <summary>
            Occurs when [configuration updated].
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.Configuration.IConfigurationManager.NamedConfigurationUpdated">
            <summary>
            Occurs when [named configuration updated].
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IConfigurationManager.CommonApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IConfigurationManager.CommonConfiguration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.SaveConfiguration">
            <summary>
            Saves the configuration.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.ReplaceConfiguration(MediaBrowser.Model.Configuration.BaseApplicationConfiguration)">
            <summary>
            Replaces the configuration.
            </summary>
            <param name="newConfiguration">The new configuration.</param>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.RegisterConfiguration``1">
            <summary>
            Manually pre-loads a factory so that it is available pre system initialisation.
            </summary>
            <typeparam name="T">Class to register.</typeparam>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.GetConfiguration(System.String)">
            <summary>
            Gets the configuration.
            </summary>
            <param name="key">The key.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.GetConfigurationStores">
            <summary>
            Gets the array of coniguration stores.
            </summary>
            <returns>Array of ConfigurationStore.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.GetConfigurationType(System.String)">
            <summary>
            Gets the type of the configuration.
            </summary>
            <param name="key">The key.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.SaveConfiguration(System.String,System.Object)">
            <summary>
            Saves the configuration.
            </summary>
            <param name="key">The key.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Common.Configuration.IConfigurationFactory})">
            <summary>
            Adds the parts.
            </summary>
            <param name="factories">The factories.</param>
        </member>
        <member name="T:MediaBrowser.Common.Configuration.IValidatingConfiguration">
            <summary>
            A configuration store that can be validated.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IValidatingConfiguration.Validate(System.Object,System.Object)">
            <summary>
            Validation method to be invoked before saving the configuration.
            </summary>
            <param name="oldConfig">The old configuration.</param>
            <param name="newConfig">The new configuration.</param>
        </member>
        <member name="T:MediaBrowser.Common.Events.EventHelper">
            <summary>
            Class EventHelper.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Events.EventHelper.QueueEventIfNotNull(System.EventHandler,System.Object,System.EventArgs,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Fires the event.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:MediaBrowser.Common.Events.EventHelper.QueueEventIfNotNull``1(System.EventHandler{``0},System.Object,``0,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Queues the event.
            </summary>
            <typeparam name="T">Argument type for the <c>handler</c>.</typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.BaseExtensions">
            <summary>
            Class BaseExtensions.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.BaseExtensions.StripHtml(System.String)">
            <summary>
            Strips the HTML.
            </summary>
            <param name="htmlString">The HTML string.</param>
            <returns><see cref="T:System.String" />.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.BaseExtensions.GetMD5(System.String)">
            <summary>
            Gets the Md5.
            </summary>
            <param name="str">The string.</param>
            <returns><see cref="T:System.Guid" />.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.HttpContextExtensions">
            <summary>
            Static class containing extension methods for <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.HttpContextExtensions.IsLocal(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Checks the origin of the HTTP context.
            </summary>
            <param name="context">The incoming HTTP context.</param>
            <returns><c>true</c> if the request is coming from LAN, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.HttpContextExtensions.GetNormalizedRemoteIp(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Extracts the remote IP address of the caller of the HTTP context.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>The remote caller IP address.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.MethodNotAllowedException">
            <summary>
            Class MethodNotAllowedException.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.MethodNotAllowedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.MethodNotAllowedException" /> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.MethodNotAllowedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.MethodNotAllowedException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.ProcessExtensions">
            <summary>
            Extension methods for <see cref="T:System.Diagnostics.Process"/>.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ProcessExtensions.WaitForExitAsync(System.Diagnostics.Process,System.TimeSpan)">
            <summary>
            Asynchronously wait for the process to exit.
            </summary>
            <param name="process">The process to wait for.</param>
            <param name="timeout">The duration to wait before cancelling waiting for the task.</param>
            <returns>True if the task exited normally, false if the timeout elapsed before the process exited.</returns>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:System.Diagnostics.Process.EnableRaisingEvents"/> is not set to true for the process.</exception>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ProcessExtensions.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Asynchronously wait for the process to exit.
            </summary>
            <param name="process">The process to wait for.</param>
            <param name="cancelToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the process to exit.</param>
            <returns>True if the task exited normally, false if cancelled before the process exited.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ProcessExtensions.HasExitedSafe(System.Diagnostics.Process)">
            <summary>
            Gets a value indicating whether the associated process has been terminated using
            <see cref="P:System.Diagnostics.Process.HasExited"/>. This is safe to call even if there is no operating system process
            associated with the <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="process">The process to check the exit status for.</param>
            <returns>
            True if the operating system process referenced by the <see cref="T:System.Diagnostics.Process"/> component has
            terminated, or if there is no associated operating system process; otherwise, false.
            </returns>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.RateLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.RateLimitExceededException" /> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.RateLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.RateLimitExceededException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.ResourceNotFoundException">
            <summary>
            Class ResourceNotFoundException.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ResourceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.ResourceNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.ResourceNotFoundException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MediaBrowser.Common.FfmpegException">
            <summary>
            Represents errors that occur during interaction with FFmpeg.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.FfmpegException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.FfmpegException"/> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.FfmpegException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.FfmpegException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MediaBrowser.Common.FfmpegException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.FfmpegException"/> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if
            no inner exception is specified.
            </param>
        </member>
        <member name="T:MediaBrowser.Common.CreationDelegateFactory">
            <summary>
            Delegate used with GetExports{T}.
            </summary>
            <param name="type">Type to create.</param>
            <returns>New instance of type <param>type</param>.</returns>
        </member>
        <member name="T:MediaBrowser.Common.IApplicationHost">
            <summary>
            An interface to be implemented by the applications hosting a kernel.
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.IApplicationHost.HasPendingRestartChanged">
            <summary>
            Occurs when [has pending restart changed].
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.SystemId">
            <summary>
            Gets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.HasPendingRestart">
            <summary>
            Gets a value indicating whether this instance has pending kernel reload.
            </summary>
            <value><c>true</c> if this instance has pending kernel reload; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.IsShuttingDown">
            <summary>
            Gets a value indicating whether this instance is currently shutting down.
            </summary>
            <value><c>true</c> if this instance is shutting down; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.CanSelfRestart">
            <summary>
            Gets a value indicating whether this instance can self restart.
            </summary>
            <value><c>true</c> if this instance can self restart; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ApplicationVersion">
            <summary>
            Gets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ServiceProvider">
            <summary>
            Gets or sets the service provider.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ApplicationVersionString">
            <summary>
            Gets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ApplicationUserAgent">
            <summary>
            Gets the application user agent.
            </summary>
            <value>The application user agent.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ApplicationUserAgentAddress">
            <summary>
            Gets the email address for use within a comment section of a user agent field.
            Presently used to provide contact information to MusicBrainz service.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.GetApiPluginAssemblies">
            <summary>
            Gets all plugin assemblies which implement a custom rest api.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the plugin assemblies.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.NotifyPendingRestart">
            <summary>
            Notifies the pending restart.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.Restart">
            <summary>
            Restarts this instance.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.GetExports``1(System.Boolean)">
            <summary>
            Gets the exports.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="manageLifetime">If set to <c>true</c> [manage lifetime].</param>
            <returns><see cref="T:System.Collections.Generic.IReadOnlyCollection`1" />.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.GetExports``1(MediaBrowser.Common.CreationDelegateFactory,System.Boolean)">
            <summary>
            Gets the exports.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="defaultFunc">Delegate function that gets called to create the object.</param>
            <param name="manageLifetime">If set to <c>true</c> [manage lifetime].</param>
            <returns><see cref="T:System.Collections.Generic.IReadOnlyCollection`1" />.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.GetExportTypes``1">
            <summary>
            Gets the export types.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>IEnumerable{Type}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="T">The <c>Type</c>.</typeparam>
            <returns>``0.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.Shutdown">
            <summary>
            Shuts down.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.Init(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="serviceCollection">Instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> interface.</param>
        </member>
        <member name="T:MediaBrowser.Common.Net.INetworkManager">
            <summary>
            Interface for the NetworkManager class.
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.Net.INetworkManager.NetworkChanged">
            <summary>
            Event triggered on network changes.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.INetworkManager.PublishedServerUrls">
            <summary>
            Gets the published server urls list.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.INetworkManager.TrustAllIP6Interfaces">
            <summary>
            Gets a value indicating whether is all IPv6 interfaces are trusted as internal.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.INetworkManager.RemoteAddressFilter">
            <summary>
            Gets the remote address filter.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.INetworkManager.IsIP6Enabled">
            <summary>
            Gets or sets a value indicating whether iP6 is enabled.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.INetworkManager.IsIP4Enabled">
            <summary>
            Gets or sets a value indicating whether iP4 is enabled.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetAllBindInterfaces(System.Boolean)">
            <summary>
            Calculates the list of interfaces to use for Kestrel.
            </summary>
            <returns>A Collection{IPObject} object containing all the interfaces to bind.
            If all the interfaces are specified, and none are excluded, it returns zero items
            to represent any address.</returns>
            <param name="individualInterfaces">When false, return <see cref="F:System.Net.IPAddress.Any"/> or <see cref="F:System.Net.IPAddress.IPv6Any"/> for all interfaces.</param>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetLoopbacks">
            <summary>
            Returns a collection containing the loopback interfaces.
            </summary>
            <returns>Collection{IPObject}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetBindInterface(MediaBrowser.Common.Net.IPObject,System.Nullable{System.Int32}@)">
             <summary>
             Retrieves the bind address to use in system url's. (Server Discovery, PlayTo, LiveTV, SystemInfo)
             If no bind addresses are specified, an internal interface address is selected.
             The priority of selection is as follows:-
            
             The value contained in the startup parameter --published-server-url.
            
             If the user specified custom subnet overrides, the correct subnet for the source address.
            
             If the user specified bind interfaces to use:-
              The bind interface that contains the source subnet.
              The first bind interface specified that suits best first the source's endpoint. eg. external or internal.
            
             If the source is from a public subnet address range and the user hasn't specified any bind addresses:-
              The first public interface that isn't a loopback and contains the source subnet.
              The first public interface that isn't a loopback. Priority is given to interfaces with gateways.
              An internal interface if there are no public ip addresses.
            
             If the source is from a private subnet address range and the user hasn't specified any bind addresses:-
              The first private interface that contains the source subnet.
              The first private interface that isn't a loopback. Priority is given to interfaces with gateways.
            
             If no interfaces meet any of these criteria, then a loopback address is returned.
            
             Interface that have been specifically excluded from binding are not used in any of the calculations.
             </summary>
             <param name="source">Source of the request.</param>
             <param name="port">Optional port returned, if it's part of an override.</param>
             <returns>IP Address to use, or loopback address if all else fails.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetBindInterface(Microsoft.AspNetCore.Http.HttpRequest,System.Nullable{System.Int32}@)">
            <summary>
            Retrieves the bind address to use in system url's. (Server Discovery, PlayTo, LiveTV, SystemInfo)
            If no bind addresses are specified, an internal interface address is selected.
            (See <see cref="M:MediaBrowser.Common.Net.INetworkManager.GetBindInterface(MediaBrowser.Common.Net.IPObject,System.Nullable{System.Int32}@)"/>.
            </summary>
            <param name="source">Source of the request.</param>
            <param name="port">Optional port returned, if it's part of an override.</param>
            <returns>IP Address to use, or loopback address if all else fails.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetBindInterface(System.Net.IPAddress,System.Nullable{System.Int32}@)">
            <summary>
            Retrieves the bind address to use in system url's. (Server Discovery, PlayTo, LiveTV, SystemInfo)
            If no bind addresses are specified, an internal interface address is selected.
            (See <see cref="M:MediaBrowser.Common.Net.INetworkManager.GetBindInterface(MediaBrowser.Common.Net.IPObject,System.Nullable{System.Int32}@)"/>.
            </summary>
            <param name="source">IP address of the request.</param>
            <param name="port">Optional port returned, if it's part of an override.</param>
            <returns>IP Address to use, or loopback address if all else fails.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetBindInterface(System.String,System.Nullable{System.Int32}@)">
            <summary>
            Retrieves the bind address to use in system url's. (Server Discovery, PlayTo, LiveTV, SystemInfo)
            If no bind addresses are specified, an internal interface address is selected.
            (See <see cref="M:MediaBrowser.Common.Net.INetworkManager.GetBindInterface(MediaBrowser.Common.Net.IPObject,System.Nullable{System.Int32}@)"/>.
            </summary>
            <param name="source">Source of the request.</param>
            <param name="port">Optional port returned, if it's part of an override.</param>
            <returns>IP Address to use, or loopback address if all else fails.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsExcludedInterface(System.Net.IPAddress)">
            <summary>
            Checks to see if the ip address is specifically excluded in LocalNetworkAddresses.
            </summary>
            <param name="address">IP address to check.</param>
            <returns>True if it is.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetMacAddresses">
            <summary>
            Get a list of all the MAC addresses associated with active interfaces.
            </summary>
            <returns>List of MAC addresses.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsGatewayInterface(MediaBrowser.Common.Net.IPObject)">
            <summary>
            Checks to see if the IP Address provided matches an interface that has a gateway.
            </summary>
            <param name="addressObj">IP to check. Can be an IPAddress or an IPObject.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsGatewayInterface(System.Net.IPAddress)">
            <summary>
            Checks to see if the IP Address provided matches an interface that has a gateway.
            </summary>
            <param name="addressObj">IP to check. Can be an IPAddress or an IPObject.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsPrivateAddressRange(MediaBrowser.Common.Net.IPObject)">
            <summary>
            Returns true if the address is a private address.
            The configuration option TrustIP6Interfaces overrides this functions behaviour.
            </summary>
            <param name="address">Address to check.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsInLocalNetwork(System.String)">
            <summary>
            Returns true if the address is part of the user defined LAN.
            The configuration option TrustIP6Interfaces overrides this functions behaviour.
            </summary>
            <param name="address">IP to check.</param>
            <returns>True if endpoint is within the LAN range.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsInLocalNetwork(MediaBrowser.Common.Net.IPObject)">
            <summary>
            Returns true if the address is part of the user defined LAN.
            The configuration option TrustIP6Interfaces overrides this functions behaviour.
            </summary>
            <param name="address">IP to check.</param>
            <returns>True if endpoint is within the LAN range.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsInLocalNetwork(System.Net.IPAddress)">
            <summary>
            Returns true if the address is part of the user defined LAN.
            The configuration option TrustIP6Interfaces overrides this functions behaviour.
            </summary>
            <param name="address">IP to check.</param>
            <returns>True if endpoint is within the LAN range.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.TryParseInterface(System.String,System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject}@)">
            <summary>
            Attempts to convert the token to an IP address, permitting for interface descriptions and indexes.
            eg. "eth1", or "TP-LINK Wireless USB Adapter".
            </summary>
            <param name="token">Token to parse.</param>
            <param name="result">Resultant object's ip addresses, if successful.</param>
            <returns>Success of the operation.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.CreateIPCollection(System.String[],System.Boolean)">
            <summary>
            Parses an array of strings into a Collection{IPObject}.
            </summary>
            <param name="values">Values to parse.</param>
            <param name="negated">When true, only include values beginning with !. When false, ignore ! values.</param>
            <returns>IPCollection object containing the value strings.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetInternalBindAddresses">
            <summary>
            Returns all the internal Bind interface addresses.
            </summary>
            <returns>An internal list of interfaces addresses.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsValidInterfaceAddress(System.Net.IPAddress)">
            <summary>
            Checks to see if an IP address is still a valid interface address.
            </summary>
            <param name="address">IP address to check.</param>
            <returns>True if it is.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsExcluded(System.Net.IPAddress)">
            <summary>
            Returns true if the IP address is in the excluded list.
            </summary>
            <param name="ip">IP to check.</param>
            <returns>True if excluded.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsExcluded(System.Net.EndPoint)">
            <summary>
            Returns true if the IP address is in the excluded list.
            </summary>
            <param name="ip">IP to check.</param>
            <returns>True if excluded.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetFilteredLANSubnets(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject})">
            <summary>
            Gets the filtered LAN ip addresses.
            </summary>
            <param name="filter">Optional filter for the list.</param>
            <returns>Returns a filtered list of LAN addresses.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.HasRemoteAccess(System.Net.IPAddress)">
            <summary>
            Checks to see if <paramref name="remoteIp"/> has access.
            </summary>
            <param name="remoteIp">IP Address of client.</param>
            <returns><b>True</b> if has access, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Net.IPHost">
            <summary>
            Object that holds a host name.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPHost.Timeout">
            <summary>
            Gets or sets timeout value before resolve required, in minutes.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPHost.None">
            <summary>
            Represents an IPHost that has no value.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPHost._lastResolved">
            <summary>
            Time when last resolved in ticks.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPHost._addresses">
            <summary>
            Gets the IP Addresses, attempting to resolve the name, if there are none.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Net.IPHost"/> class.
            </summary>
            <param name="name">Host name to assign.</param>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.#ctor(System.String,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Net.IPHost"/> class.
            </summary>
            <param name="name">Host name to assign.</param>
            <param name="address">Address to assign.</param>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPHost.Address">
            <summary>
            Gets or sets the object's first IP address.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPHost.PrefixLength">
            <summary>
            Gets or sets the object's first IP's subnet prefix.
            The setter does nothing, but shouldn't raise an exception.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPHost.HasAddress">
            <summary>
            Gets a value indicating whether the address has a value.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPHost.HostName">
            <summary>
            Gets the host name of this object.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPHost.Resolved">
            <summary>
            Gets a value indicating whether this host has attempted to be resolved.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPHost.Item(System.Int32)">
            <summary>
            Gets or sets the IP Addresses associated with this object.
            </summary>
            <param name="index">Index of address.</param>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.TryParse(System.String,MediaBrowser.Common.Net.IPHost@)">
            <summary>
            Attempts to parse the host string.
            </summary>
            <param name="host">Host name to parse.</param>
            <param name="hostObj">Object representing the string, if it has successfully been parsed.</param>
            <returns><c>true</c> if the parsing is successful, <c>false</c> if not.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.Parse(System.String)">
            <summary>
            Attempts to parse the host string.
            </summary>
            <param name="host">Host name to parse.</param>
            <returns>Object representing the string, if it has successfully been parsed.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.Parse(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Attempts to parse the host string, ensuring that it resolves only to a specific IP type.
            </summary>
            <param name="host">Host name to parse.</param>
            <param name="family">Addressfamily filter.</param>
            <returns>Object representing the string, if it has successfully been parsed.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.GetAddresses">
            <summary>
            Returns the Addresses that this item resolved to.
            </summary>
            <returns>IPAddress Array.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.Contains(System.Net.IPAddress)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.Equals(MediaBrowser.Common.Net.IPObject)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.IsIP6">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.Remove(System.Net.Sockets.AddressFamily)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.Contains(MediaBrowser.Common.Net.IPObject)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.CalculateNetworkAddress">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.ResolveHost">
            <summary>
            Attempt to resolve the ip address of a host.
            </summary>
            <returns><c>true</c> if any addresses have been resolved, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPHost.ResolveHostInternal">
            <summary>
            Task that looks up a Host name and returns its IP addresses.
            </summary>
        </member>
        <member name="T:MediaBrowser.Common.Net.IPNetAddress">
            <summary>
            An object that holds and IP address and subnet mask.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPNetAddress.None">
            <summary>
            Represents an IPNetAddress that has no value.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPNetAddress.SSDPMulticastIPv4">
            <summary>
            IPv4 multicast address.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPNetAddress.SSDPMulticastIPv6LinkLocal">
            <summary>
            IPv6 local link multicast address.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPNetAddress.SSDPMulticastIPv6SiteLocal">
            <summary>
            IPv6 site local multicast address.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPNetAddress.IP4Loopback">
            <summary>
            IP4Loopback address host.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPNetAddress.IP6Loopback">
            <summary>
            IP6Loopback address host.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPNetAddress._address">
            <summary>
            Object's IP address.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.#ctor(System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Net.IPNetAddress"/> class.
            </summary>
            <param name="address">Address to assign.</param>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.#ctor(System.Net.IPAddress,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Net.IPNetAddress"/> class.
            </summary>
            <param name="address">IP Address.</param>
            <param name="prefixLength">Mask as a CIDR.</param>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPNetAddress.Address">
            <summary>
            Gets or sets the object's IP address.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPNetAddress.PrefixLength">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.TryParse(System.String,MediaBrowser.Common.Net.IPNetAddress@)">
            <summary>
            Try to parse the address and subnet strings into an IPNetAddress object.
            </summary>
            <param name="addr">IP address to parse. Can be CIDR or X.X.X.X notation.</param>
            <param name="ip">Resultant object.</param>
            <returns>True if the values parsed successfully. False if not, resulting in the IP being null.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.Parse(System.String)">
            <summary>
            Parses the string provided, throwing an exception if it is badly formed.
            </summary>
            <param name="addr">String to parse.</param>
            <returns>IPNetAddress object.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.Contains(System.Net.IPAddress)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.Contains(MediaBrowser.Common.Net.IPObject)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.Equals(MediaBrowser.Common.Net.IPObject)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.Equals(System.Net.IPAddress)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.ToString(System.Boolean)">
            <summary>
            Returns a textual representation of this object.
            </summary>
            <param name="shortVersion">Set to true, if the subnet is to be excluded as part of the address.</param>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPNetAddress.CalculateNetworkAddress">
            <inheritdoc/>
        </member>
        <member name="T:MediaBrowser.Common.Net.IPObject">
            <summary>
            Base network object class.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.IPObject._networkAddress">
            <summary>
            The network address of this object.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPObject.Tag">
            <summary>
            Gets or sets a user defined value that is associated with this object.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPObject.Address">
            <summary>
            Gets or sets the object's IP address.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPObject.NetworkAddress">
            <summary>
            Gets the object's network address.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPObject.PrefixLength">
            <summary>
            Gets or sets the object's IP address.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.IPObject.AddressFamily">
            <summary>
            Gets the AddressFamily of this object.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.NetworkAddressOf(System.Net.IPAddress,System.Byte)">
            <summary>
            Returns the network address of an object.
            </summary>
            <param name="address">IP Address to convert.</param>
            <param name="prefixLength">Subnet prefix.</param>
            <returns>IPAddress.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.IsIP6(System.Net.IPAddress)">
            <summary>
            Tests to see if the ip address is an IP6 address.
            </summary>
            <param name="address">Value to test.</param>
            <returns>True if it is.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.IsPrivateAddressRange(System.Net.IPAddress)">
            <summary>
            Tests to see if the address in the private address range.
            </summary>
            <param name="address">Object to test.</param>
            <returns>True if it contains a private address.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.IsIPv6LinkLocal(System.Net.IPAddress)">
            <summary>
            Returns true if the IPAddress contains an IP6 Local link address.
            </summary>
            <param name="address">IPAddress object to check.</param>
            <returns>True if it is a local link address.</returns>
            <remarks>
            See https://stackoverflow.com/questions/6459928/explain-the-instance-properties-of-system-net-ipaddress
            it appears that the IPAddress.IsIPv6LinkLocal is out of date.
            </remarks>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.CidrToMask(System.Byte,System.Net.Sockets.AddressFamily)">
            <summary>
            Convert a subnet mask in CIDR notation to a dotted decimal string value. IPv4 only.
            </summary>
            <param name="cidr">Subnet mask in CIDR notation.</param>
            <param name="family">IPv4 or IPv6 family.</param>
            <returns>String value of the subnet mask in dotted decimal notation.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.MaskToCidr(System.Net.IPAddress)">
            <summary>
            Convert a mask to a CIDR. IPv4 only.
            https://stackoverflow.com/questions/36954345/get-cidr-from-netmask.
            </summary>
            <param name="mask">Subnet mask.</param>
            <returns>Byte CIDR representing the mask.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.IsLoopback">
            <summary>
            Tests to see if this object is a Loopback address.
            </summary>
            <returns>True if it is.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.Remove(System.Net.Sockets.AddressFamily)">
            <summary>
            Removes all addresses of a specific type from this object.
            </summary>
            <param name="family">Type of address to remove.</param>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.IsIP6">
            <summary>
            Tests to see if this object is an IPv6 address.
            </summary>
            <returns>True if it is.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.IsPrivateAddressRange">
            <summary>
            Returns true if this IP address is in the RFC private address range.
            </summary>
            <returns>True this object has a private address.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.Equals(System.Net.IPAddress)">
            <summary>
            Compares this to the object passed as a parameter.
            </summary>
            <param name="ip">Object to compare to.</param>
            <returns>Equality result.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.Equals(MediaBrowser.Common.Net.IPObject)">
            <summary>
            Compares this to the object passed as a parameter.
            </summary>
            <param name="other">Object to compare to.</param>
            <returns>Equality result.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.Contains(MediaBrowser.Common.Net.IPObject)">
            <summary>
            Compares the address in this object and the address in the object passed as a parameter.
            </summary>
            <param name="address">Object's IP address to compare to.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.Contains(System.Net.IPAddress)">
            <summary>
            Compares the address in this object and the address in the object passed as a parameter.
            </summary>
            <param name="address">Object's IP address to compare to.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Common.Net.IPObject.CalculateNetworkAddress">
            <summary>
            Calculates the network address of this object.
            </summary>
            <returns>Returns the network address of this object.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Net.NamedClient">
            <summary>
            Registered http client names.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.NamedClient.Default">
            <summary>
            Gets the value for the default named http client.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Net.NamedClient.MusicBrainz">
            <summary>
            Gets the value for the MusicBrainz named http client.
            </summary>
        </member>
        <member name="T:MediaBrowser.Common.Net.NetworkExtensions">
            <summary>
            Defines the <see cref="T:MediaBrowser.Common.Net.NetworkExtensions" />.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.AddItem(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject},System.Net.IPAddress)">
            <summary>
            Add an address to the collection.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <param name="ip">Item to add.</param>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.AddItem(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject},MediaBrowser.Common.Net.IPObject,System.Boolean)">
            <summary>
            Adds a network to the collection.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <param name="item">Item to add.</param>
            <param name="itemsAreNetworks">If <c>true</c> the values are treated as subnets.
            If <b>false</b> items are addresses.</param>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.AsString(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject})">
            <summary>
            Converts this object to a string.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <returns>Returns a string representation of this object.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.ContainsAddress(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject},System.Net.IPAddress)">
            <summary>
            Returns true if the collection contains an item with the ip address,
            or the ip address falls within any of the collection's network ranges.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <param name="item">The item to look for.</param>
            <returns>True if the collection contains the item.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.ContainsAddress(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject},MediaBrowser.Common.Net.IPObject)">
            <summary>
            Returns true if the collection contains an item with the ip address,
            or the ip address falls within any of the collection's network ranges.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <param name="item">The item to look for.</param>
            <returns>True if the collection contains the item.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.Compare(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject},System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject})">
            <summary>
            Compares two Collection{IPObject} objects. The order is ignored.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <param name="dest">Item to compare to.</param>
            <returns>True if both are equal.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.AsNetworks(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject})">
            <summary>
            Returns a collection containing the subnets of this collection given.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <returns>Collection{IPObject} object containing the subnets.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.Exclude(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject},System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject},System.Boolean)">
            <summary>
            Excludes all the items from this list that are found in excludeList.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <param name="excludeList">Items to exclude.</param>
            <param name="isNetwork">Collection is a network collection.</param>
            <returns>A new collection, with the items excluded.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.NetworkExtensions.ThatAreContainedInNetworks(System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject},System.Collections.ObjectModel.Collection{MediaBrowser.Common.Net.IPObject})">
            <summary>
            Returns all items that co-exist in this object and target.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ObjectModel.Collection`1"/>.</param>
            <param name="target">Collection to compare with.</param>
            <returns>A collection containing all the matches.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Plugins.BasePlugin">
            <summary>
            Provides a common base class for all plugins.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.Id">
            <summary>
            Gets the unique id.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.Version">
            <summary>
            Gets the plugin version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.AssemblyFilePath">
            <summary>
            Gets the path to the assembly file.
            </summary>
            <value>The assembly file path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.DataFolderPath">
            <summary>
            Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.
            </summary>
            <value>The data folder path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.CanUninstall">
            <summary>
            Gets a value indicating whether the plugin can be uninstalled.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin.GetPluginInfo">
            <summary>
            Gets the plugin info.
            </summary>
            <returns>PluginInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin.OnUninstalling">
            <summary>
            Called just before the plugin is uninstalled from the server.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin.SetAttributes(System.String,System.String,System.Version)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin.SetId(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Plugins.BasePlugin`1">
            <summary>
            Provides a common base class for all plugins.
            </summary>
            <typeparam name="TConfigurationType">The type of the T configuration type.</typeparam>
        </member>
        <member name="F:MediaBrowser.Common.Plugins.BasePlugin`1._configurationSyncLock">
            <summary>
            The configuration sync lock.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Plugins.BasePlugin`1._configurationSaveLock">
            <summary>
            The configuration save lock.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Plugins.BasePlugin`1._configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Model.Serialization.IXmlSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Plugins.BasePlugin`1" /> class.
            </summary>
            <param name="applicationPaths">The application paths.</param>
            <param name="xmlSerializer">The XML serializer.</param>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.XmlSerializer">
            <summary>
            Gets the XML serializer.
            </summary>
            <value>The XML serializer.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ConfigurationType">
            <summary>
            Gets the type of configuration this plugin uses.
            </summary>
            <value>The type of the configuration.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ConfigurationChanged">
            <summary>
            Gets or sets the event handler that is triggered when this configuration changes.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.AssemblyFileName">
            <summary>
            Gets the name the assembly file.
            </summary>
            <value>The name of the assembly file.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.Configuration">
            <summary>
            Gets or sets the plugin configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ConfigurationFileName">
            <summary>
            Gets the name of the configuration file. Subclasses should override.
            </summary>
            <value>The name of the configuration file.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ConfigurationFilePath">
            <summary>
            Gets the full path to the configuration file.
            </summary>
            <value>The configuration file path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.MediaBrowser#Common#Plugins#IHasPluginConfiguration#Configuration">
            <summary>
            Gets the plugin configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.SaveConfiguration(`0)">
            <summary>
            Saves the current configuration to the file system.
            </summary>
            <param name="config">Configuration to save.</param>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.SaveConfiguration">
            <summary>
            Saves the current configuration to the file system.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.UpdateConfiguration(MediaBrowser.Model.Plugins.BasePluginConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.GetPluginInfo">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Plugins.IHasPluginConfiguration">
            <summary>
            Defines the <see cref="T:MediaBrowser.Common.Plugins.IHasPluginConfiguration" />.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IHasPluginConfiguration.ConfigurationType">
            <summary>
            Gets the type of configuration this plugin uses.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IHasPluginConfiguration.Configuration">
            <summary>
            Gets the plugin's configuration.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IHasPluginConfiguration.UpdateConfiguration(MediaBrowser.Model.Plugins.BasePluginConfiguration)">
            <summary>
            Completely overwrites the current configuration with a new copy.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:MediaBrowser.Common.Plugins.IPlugin">
            <summary>
            Defines the <see cref="T:MediaBrowser.Common.Plugins.IPlugin" />.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.Description">
            <summary>
            Gets the Description.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.Id">
            <summary>
            Gets the unique id.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.Version">
            <summary>
            Gets the plugin version.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.AssemblyFilePath">
            <summary>
            Gets the path to the assembly file.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.CanUninstall">
            <summary>
            Gets a value indicating whether the plugin can be uninstalled.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.DataFolderPath">
            <summary>
            Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPlugin.GetPluginInfo">
            <summary>
            Gets the <see cref="T:MediaBrowser.Model.Plugins.PluginInfo"/>.
            </summary>
            <returns>PluginInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPlugin.OnUninstalling">
            <summary>
            Called when just before the plugin is uninstalled from the server.
            </summary>
        </member>
        <member name="T:MediaBrowser.Common.Plugins.IPluginManager">
            <summary>
            Defines the <see cref="T:MediaBrowser.Common.Plugins.IPluginManager" />.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPluginManager.Plugins">
            <summary>
            Gets the Plugins.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.CreatePlugins">
            <summary>
            Creates the plugins.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.LoadAssemblies">
            <summary>
            Returns all the assemblies.
            </summary>
            <returns>An IEnumerable{Assembly}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the plugin's services with the DI.
            Note: DI is not yet instantiated yet.
            </summary>
            <param name="serviceCollection">A <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/> instance.</param>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.SaveManifest(MediaBrowser.Common.Plugins.PluginManifest,System.String)">
            <summary>
            Saves the manifest back to disk.
            </summary>
            <param name="manifest">The <see cref="T:MediaBrowser.Common.Plugins.PluginManifest"/> to save.</param>
            <param name="path">The path where to save the manifest.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.GenerateManifest(MediaBrowser.Model.Updates.PackageInfo,System.Version,System.String,MediaBrowser.Model.Plugins.PluginStatus)">
            <summary>
            Generates a manifest from repository data.
            </summary>
            <param name="packageInfo">The <see cref="T:MediaBrowser.Model.Updates.PackageInfo"/> used to generate a manifest.</param>
            <param name="version">Version to be installed.</param>
            <param name="path">The path where to save the manifest.</param>
            <param name="status">Initial status of the plugin.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.ImportPluginFrom(System.String)">
            <summary>
            Imports plugin details from a folder.
            </summary>
            <param name="folder">Folder of the plugin.</param>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.FailPlugin(System.Reflection.Assembly)">
            <summary>
            Disable the plugin.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> of the plug to disable.</param>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.DisablePlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Disable the plugin.
            </summary>
            <param name="plugin">The <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> of the plug to disable.</param>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.EnablePlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Enables the plugin, disabling all other versions.
            </summary>
            <param name="plugin">The <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> of the plug to disable.</param>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.GetPlugin(System.Guid,System.Version)">
            <summary>
            Attempts to find the plugin with and id of <paramref name="id"/>.
            </summary>
            <param name="id">Id of plugin.</param>
            <param name="version">The version of the plugin to locate.</param>
            <returns>A <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> if located, or null if not.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginManager.RemovePlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Removes the plugin.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>Outcome of the operation.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Plugins.IPluginServiceRegistrator">
            <summary>
            Defines the <see cref="T:MediaBrowser.Common.Plugins.IPluginServiceRegistrator" />.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPluginServiceRegistrator.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the plugin's services with the service collection.
            </summary>
            <remarks>
            This interface is only used for service registration and requires a parameterless constructor.
            </remarks>
            <param name="serviceCollection">The service collection.</param>
        </member>
        <member name="T:MediaBrowser.Common.Plugins.LocalPlugin">
            <summary>
            Local plugin class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.LocalPlugin.#ctor(System.String,System.Boolean,MediaBrowser.Common.Plugins.PluginManifest)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> class.
            </summary>
            <param name="path">The plugin path.</param>
            <param name="isSupported"><b>True</b> if Jellyfin supports this version of the plugin.</param>
            <param name="manifest">The manifest record for this plugin, or null if one does not exist.</param>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.LocalPlugin.Id">
            <summary>
            Gets the plugin id.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.LocalPlugin.Name">
            <summary>
            Gets the plugin name.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.LocalPlugin.Version">
            <summary>
            Gets the plugin version.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.LocalPlugin.Path">
            <summary>
            Gets the plugin path.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.LocalPlugin.DllFiles">
            <summary>
            Gets or sets the list of dll files for this plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.LocalPlugin.Instance">
            <summary>
            Gets or sets the instance of this plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.LocalPlugin.IsEnabledAndSupported">
            <summary>
            Gets a value indicating whether Jellyfin supports this version of the plugin, and it's enabled.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.LocalPlugin.Manifest">
            <summary>
            Gets a value indicating whether the plugin has a manifest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.LocalPlugin.Compare(MediaBrowser.Common.Plugins.LocalPlugin,MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Compare two <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/>.
            </summary>
            <param name="a">The first item.</param>
            <param name="b">The second item.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.LocalPlugin.GetPluginInfo">
            <summary>
            Returns the plugin information.
            </summary>
            <returns>A <see cref="T:MediaBrowser.Model.Plugins.PluginInfo"/> instance containing the information.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.LocalPlugin.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Plugins.LocalPlugin.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Plugins.LocalPlugin.Equals(MediaBrowser.Common.Plugins.LocalPlugin)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Plugins.PluginManifest">
            <summary>
            Defines a Plugin manifest file.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.PluginManifest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Plugins.PluginManifest"/> class.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Category">
            <summary>
            Gets or sets the category of the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Changelog">
            <summary>
            Gets or sets the changelog information.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Description">
            <summary>
            Gets or sets the description of the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Id">
            <summary>
            Gets or sets the Global Unique Identifier for the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Name">
            <summary>
            Gets or sets the Name of the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Overview">
            <summary>
            Gets or sets an overview of the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Owner">
            <summary>
            Gets or sets the owner of the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.TargetAbi">
            <summary>
            Gets or sets the compatibility version for the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Timestamp">
            <summary>
            Gets or sets the timestamp of the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Version">
            <summary>
            Gets or sets the Version number of the plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.Status">
            <summary>
            Gets or sets a value indicating the operational status of this plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.AutoUpdate">
            <summary>
            Gets or sets a value indicating whether this plugin should automatically update.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.PluginManifest.ImagePath">
            <summary>
            Gets or sets the ImagePath
            Gets or sets a value indicating whether this plugin has an image.
            Image must be located in the local plugin folder.
            </summary>
        </member>
        <member name="T:MediaBrowser.Common.Progress.ActionableProgress`1">
            <summary>
            Class ActionableProgress.
            </summary>
            <typeparam name="T">The type for the action parameter.</typeparam>
        </member>
        <member name="F:MediaBrowser.Common.Progress.ActionableProgress`1._action">
            <summary>
            The _actions.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Progress.ActionableProgress`1.RegisterAction(System.Action{`0})">
            <summary>
            Registers the action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:MediaBrowser.Common.Providers.ProviderIdParsers">
            <summary>
            Parsers for provider ids.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Providers.ProviderIdParsers.TryFindImdbId(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char}@)">
            <summary>
            Parses an IMDb id from a string.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="imdbId">The parsed IMDb id.</param>
            <returns>True if parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Providers.ProviderIdParsers.TryFindTmdbMovieId(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char}@)">
            <summary>
            Parses an TMDb id from a movie url.
            </summary>
            <param name="text">The text with the url to parse.</param>
            <param name="tmdbId">The parsed TMDb id.</param>
            <returns>True if parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Providers.ProviderIdParsers.TryFindTmdbSeriesId(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char}@)">
            <summary>
            Parses an TMDb id from a series url.
            </summary>
            <param name="text">The text with the url to parse.</param>
            <param name="tmdbId">The parsed TMDb id.</param>
            <returns>True if parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Providers.ProviderIdParsers.TryFindTvdbId(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char}@)">
            <summary>
            Parses an TVDb id from a url.
            </summary>
            <param name="text">The text with the url to parse.</param>
            <param name="tvdbId">The parsed TVDb id.</param>
            <returns>True if parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Providers.SubtitleConfigurationFactory.GetConfigurations">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Updates.IInstallationManager">
            <summary>
            Defines the <see cref="T:MediaBrowser.Common.Updates.IInstallationManager" />.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Updates.IInstallationManager.CompletedInstallations">
            <summary>
            Gets the completed installations.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.GetPackages(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Parses a plugin manifest at the supplied URL.
            </summary>
            <param name="manifestName">Name of the repository.</param>
            <param name="manifest">The URL to query.</param>
            <param name="filterIncompatible">Filter out incompatible plugins.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IReadOnlyList{PackageInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.GetAvailablePackages(System.Threading.CancellationToken)">
            <summary>
            Gets all available packages that are supported by this version.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IReadOnlyList{PackageInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.FilterPackages(System.Collections.Generic.IEnumerable{MediaBrowser.Model.Updates.PackageInfo},System.String,System.Guid,System.Version)">
            <summary>
            Returns all plugins matching the requirements.
            </summary>
            <param name="availablePackages">The available packages.</param>
            <param name="name">The name of the plugin.</param>
            <param name="id">The id of the plugin.</param>
            <param name="specificVersion">The version of the plugin.</param>
            <returns>All plugins matching the requirements.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.GetCompatibleVersions(System.Collections.Generic.IEnumerable{MediaBrowser.Model.Updates.PackageInfo},System.String,System.Guid,System.Version,System.Version)">
            <summary>
            Returns all compatible versions ordered from newest to oldest.
            </summary>
            <param name="availablePackages">The available packages.</param>
            <param name="name">The name.</param>
            <param name="id">The id of the plugin.</param>
            <param name="minVersion">The minimum required version of the plugin.</param>
            <param name="specificVersion">The specific version of the plugin to install.</param>
            <returns>All compatible versions ordered from newest to oldest.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.GetAvailablePluginUpdates(System.Threading.CancellationToken)">
            <summary>
            Returns the available compatible plugin updates.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The available plugin updates.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.InstallPackage(MediaBrowser.Model.Updates.InstallationInfo,System.Threading.CancellationToken)">
            <summary>
            Installs the package.
            </summary>
            <param name="package">The package.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><see cref="T:System.Threading.Tasks.Task" />.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.UninstallPlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Uninstalls a plugin.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.CancelInstallation(System.Guid)">
            <summary>
            Cancels the installation.
            </summary>
            <param name="id">The id of the package that is being installed.</param>
            <returns>Returns true if the install was cancelled.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Updates.InstallationEventArgs">
            <summary>
            Defines the <see cref="T:MediaBrowser.Common.Updates.InstallationEventArgs" />.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Updates.InstallationEventArgs.InstallationInfo">
            <summary>
            Gets or sets the <see cref="P:MediaBrowser.Common.Updates.InstallationEventArgs.InstallationInfo"/>.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Updates.InstallationEventArgs.VersionInfo">
            <summary>
            Gets or sets the <see cref="P:MediaBrowser.Common.Updates.InstallationEventArgs.VersionInfo"/>.
            </summary>
        </member>
    </members>
</doc>
